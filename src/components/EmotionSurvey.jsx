import React, { useEffect, useState } from "react";
import styled from "styled-components";
import MoodTestAPI from "../services/moodTest/moodTestAPI";

export default function EmotionSurvey() {
 

  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [emotionalState, setEmotionalState] = useState("");
  const [question, setQuestions] = useState([]);

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const api = new MoodTestAPI();
        const response = await api.getMoodTest();
        setQuestions(response.data); // L∆∞u tr·ªØ d·ªØ li·ªáu c√¢u h·ªèi t·ª´ API v√†o state
      } catch (error) {
        console.error("Error fetching mood test questions:", error);
      }
    };

    fetchQuestions(); // G·ªçi h√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu khi component ƒë∆∞·ª£c render
  }, []);

  const handleAnswerSelect = (questionId, optionId) => {
    setSelectedAnswers((prevState) => ({
      ...prevState,
      [questionId]: optionId,
    }));

    // Ki·ªÉm tra n·∫øu ƒë√£ tr·∫£ l·ªùi h·∫øt t·∫•t c·∫£ c√°c c√¢u h·ªèi
    if (Object.keys(selectedAnswers).length + 1 === question.length) {
      calculateEmotionalState(); // N·∫øu ƒë√£ tr·∫£ l·ªùi h·∫øt, t√≠nh to√°n k·∫øt qu·∫£ c·∫£m x√∫c
    }
  };
  const calculateEmotionalState = () => {
    const totalScore = Object.values(selectedAnswers).reduce((acc, answer) => {
      const answerScore = { a: 2, b: 1, c: 0 };
      return acc + answerScore[answer];
    }, 0);
    console.log(totalScore);

    if (totalScore >= 19) {
      setEmotionalState(
        "T√¢m tr·∫°ng t√≠ch c·ª±c v√† t·ª± tin üòç: B·∫°n th∆∞·ªùng c·∫£m th·∫•y t·ª± tin v√† s·∫µn l√≤ng ƒë·ªëi m·∫∑t v·ªõi th√°ch th·ª©c, t·∫≠n d·ª•ng c∆° h·ªôi ƒë·ªÉ ph√°t tri·ªÉn b·∫£n th√¢n v√† th·ªÉ hi·ªán s·ª± quy·∫øt t√¢m. Nh∆∞ng sau trong th√¢m t√¢m ban c√≥ th·ª±c s·ª± nh∆∞ th·∫ø kh√¥ng"
      );
    } else if (totalScore >= 15 && totalScore < 19) {
      setEmotionalState(
        "T√¢m tr·∫°ng ·ªïn ƒë·ªãnh v√† b√¨nh tƒ©nh üòä: B·∫°n c√≥ kh·∫£ nƒÉng duy tr√¨ t√¨nh tr·∫°ng b√¨nh tƒ©nh v√† c√¢n nh·∫Øc trong c√°c t√¨nh hu·ªëng kh√≥ khƒÉn, kh√¥ng b·ªã chi ph·ªëi b·ªüi c·∫£m x√∫c ti√™u c·ª±c. D√π mu·ªën duy tr√¨ t√¢m tr·∫°ng t√≠ch c·ª±c v√† t·ª± tin, nh∆∞ng ƒë√¥i khi kh√≥ khƒÉn v·∫´n lu√¥n ƒëeo b√°m v√† khi·∫øn t√¢m h·ªìn m·ªát m·ªèi."
      );
    } else if (totalScore >= 11 && totalScore < 15) {
      setEmotionalState(
        "T√¢m tr·∫°ng lo l·∫Øng v√† ph·∫£n ·ª©ng ti√™u c·ª±c üò£: B·∫°n c√≥ xu h∆∞·ªõng lo l·∫Øng, cƒÉng th·∫≥ng v√† ph·∫£n ·ª©ng ti√™u c·ª±c ƒë·ªëi v·ªõi c√°c t√¨nh hu·ªëng √°p ƒë·∫∑t ho·∫∑c kh√¥ng c√¥ng b·∫±ng. D√π ƒëang tr·∫£i qua t√¢m tr·∫°ng lo l·∫Øng v√† ph·∫£n ·ª©ng ti√™u c·ª±c, nh∆∞ng t√¥i tin r·∫±ng c√≥ th·ªÉ t√¨m ra c√°ch ƒë·ªÉ v∆∞·ª£t qua v√† h·ªçc h·ªèi t·ª´ nh·ªØng tr·∫£i nghi·ªám n√†y"
      );
    } else if (totalScore >= 6 && totalScore < 11) {
      setEmotionalState(
        "T√¢m tr·∫°ng ch√°n n·∫£n v√† m·∫•t ni·ªÅm tin ü•≤: B·∫°n th∆∞·ªùng c·∫£m th·∫•y ch√°n n·∫£n v√† m·∫•t ni·ªÅm tin khi g·∫∑p ph·∫£i kh√≥ khƒÉn, c√≥ th·ªÉ c·∫£m th·∫•y m·∫•t h·ª©ng th√∫ v√† mu·ªën t·ª´ b·ªè, v√† c√≥ kh·∫£ nƒÉng b·ªã. M·∫∑c d√π ƒëang tr·∫£i qua t√¢m tr·∫°ng ch√°n n·∫£n v√† m·∫•t ni·ªÅm tin, nh∆∞ng t√¥i v·∫´n tin r·∫±ng m·ªçi kh√≥ khƒÉn ƒë·ªÅu c√≥ th·ªÉ ƒë∆∞·ª£c v∆∞·ª£t qua v√† s·∫Ω t√¨m th·∫•y ngu·ªìn ƒë·ªông vi√™n ƒë·ªÉ ti·∫øp t·ª•c ti·∫øn l√™n. "
      );
    } else {
      setEmotionalState(
        "T√¢m tr·∫°ng kh√≥ ch·ªãu v√† t·ª©c gi·∫≠n üò°: B·∫°n c√≥ th·ªÉ tr·∫£i qua c·∫£m x√∫c t·ª©c gi·∫≠n, ghen t·ª©c ho·∫∑c kh√≥ ch·ªãu khi ƒë·ªëi m·∫∑t v·ªõi c√°c t√¨nh hu·ªëng kh√¥ng mong mu·ªën ho·∫∑c b·∫•t c√¥ng. Nh∆∞ng c·ªë l√™n t√¥i tin b·∫°n s·∫Ω l√† ng∆∞·ªùi v∆∞·ª£t qua t·∫•t c·∫£"
      );
    }
  };
  const handleReset = () => {
    setSelectedAnswers({});
    setEmotionalState("");
  };

  return (
    <Container className="containers">
      <h1> üòâüòçüòäB√†i ki·ªÉm tra c·∫£m x√∫cüò£ü•≤üò°</h1>
      <p>
        ƒê·ª´ng lo l·∫Øng v·ªÅ m·∫•t ph∆∞∆°ng h∆∞·ªõng trong cu·ªôc s·ªëng. H√£y tham gia v√†o b√†i
        ki·ªÉm tra c·∫£m x√∫c c·ªßa ch√∫ng t√¥i ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ b·∫£n th√¢n v√† nh·∫≠n ƒë∆∞·ª£c
        c√°c bi·ªán ph√°p ch·ªØa l√†nh ph√π h·ª£p nh·∫•t. B·∫Øt ƒë·∫ßu h√†nh tr√¨nh c·ªßa b·∫°n ƒë·ªÉ t√¨m
        ra l·ªëi tho√°t v√† t·∫°o ra m·ªôt cu·ªôc s·ªëng h·∫°nh ph√∫c h∆°n ngay b√¢y gi·ªù!
      </p>
      <form>
        {question.map((question) => (
          <div key={question.id}>
            {question.attributes?.name && (
              <>
                <h3>{question.attributes.name.question}</h3>
                {question.attributes.name.options.map((option) => (
                  <div className="radio-container" key={option.id}>
                    <input
                      type="radio"
                      id={`${question.id}-${option.id}`}
                      name={question.id}
                      value={option.id}
                      checked={selectedAnswers[question.id] === option.id}
                      onChange={() =>
                        handleAnswerSelect(question.id, option.id)
                      }
                    />
                    <label htmlFor={`${question.id}-${option.id}`}>
                      {option.text}
                    </label>
                  </div>
                ))}
              </>
            )}
          </div>
        ))}
      </form>
      {emotionalState && (
        <div className="result">
          <h2>
            Theo nh∆∞ nghi√™n c·ª©u c√°c c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ch√∫ng t√¥i ƒë∆∞a ra k·∫øt c·ªßa
            sau
          </h2>
          <p>{emotionalState}</p>
          <button onClick={handleReset}>L√†m l·∫°i b√†i test</button>
        </div>
      )}
    </Container>
  );
}

const Container = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  h1 {
    margin-bottom: 50px;
  }
  p {
    font-size: var(--font-size-small);
    text-align: center;
    padding: 0 50px 50px;
  }
  form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    div {
      background-color: #f0f0f0;
      padding: 20px;
      border-radius: 20px;
    }
  }
  .result {
    margin: 20px 0;
    text-align: center;
    background-color: #f0f0f0;
    border-radius: 20px;
    padding: 20px;
    p {
      font-size: var(--font-size-normal);
    }
    button {
      text-align: center;
      color: var(--primary-color);
      border: var(--primary-color) 1px solid;
      border-radius: 20px;
      padding: 10px 20px;
    }
  }
  .radio-container {
    display: inline-block; /* Hi·ªÉn th·ªã theo chi·ªÅu ngang */
    margin-right: 10px; /* Kho·∫£ng c√°ch gi·ªØa c√°c n√∫t */
    width: 100%;
    label {
      cursor: pointer;
    }
  }

  .radio-container input[type="radio"] {
    appearance: none; /* Lo·∫°i b·ªè giao di·ªán m·∫∑c ƒë·ªãnh c·ªßa input radio */
    width: 20px; /* ƒê·ªô r·ªông */
    height: 20px; /* ƒê·ªô cao */
    border-radius: 50%; /* Bo tr√≤n */
    border: 2px solid #999; /* Vi·ªÅn */
    outline: none; /* Lo·∫°i b·ªè vi·ªÅn khi ƒë∆∞·ª£c focus */
    cursor: pointer; /* Con tr·ªè chu·ªôt */
    margin-right: 5px; /* Kho·∫£ng c√°ch gi·ªØa n√∫t v√† nh√£n */
  }

  .radio-container input[type="radio"]:checked {
    background-color: var(--primary-color); /* M√†u n·ªÅn khi ƒë∆∞·ª£c ch·ªçn */
  }

  //reponsive
  @media (max-width: 430px){
    h1{
      font-size:21px;
    }
    p{
      padding: 0 10px 10px;
    }
    form{
      grid-template-columns: 1fr;
      div{
        padding: 10px;
      }
    }
  }
`;
